<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zequn&#39;s Blog</title>
  
  <subtitle>Stay hungry Stay Foolish</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zequnsong.github.io/"/>
  <updated>2019-04-28T06:12:16.317Z</updated>
  <id>https://zequnsong.github.io/</id>
  
  <author>
    <name>Zequn Song</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Introduction to AI</title>
    <link href="https://zequnsong.github.io/2019/04/28/Introduction-to-AI/"/>
    <id>https://zequnsong.github.io/2019/04/28/Introduction-to-AI/</id>
    <published>2019-04-28T06:09:22.000Z</published>
    <updated>2019-04-28T06:12:16.317Z</updated>
    
    <content type="html"><![CDATA[<hr><img src="/2019/04/28/Introduction-to-AI/cover.png" width="800" height="200" title="What is AI ?"><p>What is AI? </p><p>Nowadays, AI means designing a rational agent, which could act rationlly to choose the action that maximizes its expected utility.</p><h4 id="Agent"><a href="#Agent" class="headerlink" title="Agent"></a>Agent</h4><p>An agent is an entity that perceives and acts. A rational agent selects actions that maximize its expected utility. Characteristics of the percepts, environment, and action space dictate techniques for selecting rational actions.</p><p>An agent needs sensors to sense the information of the environment, and also needs actuators to take actions based on perceived information.</p><p><img src="AgentInAI.jpg" width="300" height="120" alt="How agent works"></p><h4 id="Goal"><a href="#Goal" class="headerlink" title="Goal"></a>Goal</h4><p>This and following articles are about general AI techniques for a variety of problem types and learning to recognize when and how a new problem can be solved with an existing technique.</p><p>The following articles will cover AI in two parts:</p><ul><li>Part I: Making Decisions<ul><li>Uninformed and Informed Search</li><li>Constraint Satisfaction Problem</li><li>Adversarial and Uncertain Search</li></ul></li></ul><ul><li>Part II: Reasoning under Uncertainty<ul><li>Markov Decision Problem</li><li>Reinforcement Learning</li><li>Markov Model &amp; Hidden Markov Model</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;img src=&quot;/2019/04/28/Introduction-to-AI/cover.png&quot; width=&quot;800&quot; height=&quot;200&quot; title=&quot;What is AI ?&quot;&gt;
&lt;p&gt;What is AI? &lt;/p&gt;
&lt;p&gt;Nowadays, AI 
      
    
    </summary>
    
      <category term="Artificial Intelligence" scheme="https://zequnsong.github.io/categories/Artificial-Intelligence/"/>
    
      <category term="Introduction to AI" scheme="https://zequnsong.github.io/categories/Artificial-Intelligence/Introduction-to-AI/"/>
    
    
      <category term="AI" scheme="https://zequnsong.github.io/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>TagPlugins Test</title>
    <link href="https://zequnsong.github.io/2019/04/28/TagPlugins-Test/"/>
    <id>https://zequnsong.github.io/2019/04/28/TagPlugins-Test/</id>
    <published>2019-04-28T06:08:58.000Z</published>
    <updated>2019-04-28T06:24:53.380Z</updated>
    
    <content type="html"><![CDATA[<hr><p>In Hexo, Tag Plugins are used for inserting specific content into the article. Let me show you how it works here.</p><h2 id="Quote"><a href="#Quote" class="headerlink" title="Quote"></a>Quote</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><p>Example: </p><blockquote><p>Use all the parameters</p><footer><strong>Zequn Song, A book of Genius</strong><cite><a href="https://zequnsong.github.io">Zequn's blog</a></cite></footer></blockquote><blockquote><p>Don’t worry, Tweet happy. (Quote from twitter)</p><footer><strong>@Twitter</strong><cite><a href="https://twitter.com/Twitter/status/1119338115989213185" target="_blank" rel="noopener">twitter.com/Twitter/status/1119338115989213185</a></cite></footer></blockquote><h2 id="Code-Block"><a href="#Code-Block" class="headerlink" title="Code Block"></a>Code Block</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock [lang:language] [description] [source_link for description]%&#125;</span><br><span class="line">code</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><p>Example:</p><figure class="highlight java"><figcaption><span>test-java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Test for code block"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="jsFiddle"><a href="#jsFiddle" class="headerlink" title="jsFiddle"></a>jsFiddle</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% jsfiddle shorttag [tabs] [skin] [width] [height] %&#125;</span><br></pre></td></tr></table></figure><iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/Zequn/0v7j29ep/1/embedded/js,html,css,result/dark" frameborder="0" allowfullscreen></iframe><h2 id="Gist"><a href="#Gist" class="headerlink" title="Gist"></a>Gist</h2><p>Embed with js:</p><script src="https://gist.github.com/ZequnSong/08f61c6d1c146014a297eadf486bacef.js" file="index.html"></script><p>Embed with tag plugins:</p><script src="//gist.github.com/08f61c6d1c146014a297eadf486bacef.js?file=index.html"></script><p>Gist Preview on bl.ocks: <a href="https://bl.ocks.org/ZequnSong/08f61c6d1c146014a297eadf486bacef" target="_blank" rel="noopener">https://bl.ocks.org/ZequnSong/08f61c6d1c146014a297eadf486bacef</a></p><h2 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h2><p>can be used to embed web, video, music</p><iframe src="http://v.youku.com/v_show/id_XOTIxNDYzODU2.html" width="930" height="542" frameborder="0" allowfullscreen></iframe><h2 id="image"><a href="#image" class="headerlink" title="image"></a>image</h2><img src="/2019/04/28/TagPlugins-Test/dfeb310fcf5b3751849d6c6278e05299.jpg" width="920" height="613" title="example picture"><p><img src="1-1PG6122T4.jpg" alt="test markdown"></p><h2 id="youtube"><a href="#youtube" class="headerlink" title="youtube"></a>youtube</h2><div class="video-container"><iframe src="//www.youtube.com/embed/whrb7UfKBeU" frameborder="0" allowfullscreen></iframe></div><h2 id="vimeo"><a href="#vimeo" class="headerlink" title="vimeo"></a>vimeo</h2><div class="video-container"><iframe src="//player.vimeo.com/video/330553859" frameborder="0" allowfullscreen></iframe></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;In Hexo, Tag Plugins are used for inserting specific content into the article. Let me show you how it works here.&lt;/p&gt;
&lt;h2 id=&quot;Quote&quot;
      
    
    </summary>
    
      <category term="Hexo" scheme="https://zequnsong.github.io/categories/Hexo/"/>
    
      <category term="Tag Plugins" scheme="https://zequnsong.github.io/categories/Hexo/Tag-Plugins/"/>
    
    
  </entry>
  
  <entry>
    <title>Tree Search</title>
    <link href="https://zequnsong.github.io/2019/04/28/Tree-Search/"/>
    <id>https://zequnsong.github.io/2019/04/28/Tree-Search/</id>
    <published>2019-04-28T04:00:00.000Z</published>
    <updated>2019-04-28T06:24:45.112Z</updated>
    
    <content type="html"><![CDATA[<hr><p>A problem-solving agent is one kind of goal-based agent. We already know that the characteristics of the environment dictate techniques for solving the problem. And the fast search techniques are suitable for known, observable, and deterministic environments.</p><h4 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h4><p><strong>Known:</strong> the agent knows which states are reached by each action<br><strong>Observable:</strong> the agent always knows the current state<br><strong>Deterministic:</strong> each action has exactly one outcome</p><p>Before trying to solve the problem, we need to formulate the problem. </p><h4 id="Problem-Formulation"><a href="#Problem-Formulation" class="headerlink" title="Problem Formulation"></a>Problem Formulation</h4><ul><li><strong>Initial state</strong></li><li><strong>Actions &amp; Cost</strong></li><li><strong>Transition function:</strong> Result(state, action) = next state</li><li><strong>State space:</strong> include every possible state</li><li><strong>Goal test:</strong> which determines whether a given state is a goal state</li></ul><img src="/2019/04/28/Tree-Search/mapOfRomania.jpg" title="Map of Romania"><center><font color="#afaaaa" size="4">Map of Rimania</font></center><h6 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h6><p>Imagine an agent in the city of Arad, Romania. It wants to reach Bucharest.</p><ul><li>The environment is<br>– known: the agent has a map of Romania;<br>– observable: each city has a sign indicating its presence to arriving drivers;<br>– deterministic: if agent chooses to drive from Arad to Sibiu, it does end up in Sibiu.</li></ul><ul><li>The problem formulation is<br>– Initial state: Arad;<br>– Actions &amp; Cost: action == drive from city A to city B; cost == distance;<br>– Transition function: Result(current city, action) = next city – known from the map;<br>– State space: Cities on the map;<br>– Goal test: Is state == Bucharest?</li></ul><h4 id="Search-Tree"><a href="#Search-Tree" class="headerlink" title="Search Tree"></a>Search Tree</h4><p>After formulated the problem, we now need to solve it. </p><p>A solution to the problem above is a sequence of actions which transforms the initial state to a goal state. Search algorithms work by considering various possible action sequences through the search tree.</p><ul><li>Component of a search tree<br>– root : initial state<br>– nodes: states in state space<br>– branches : actions<br>– frontier (open list): a queue which contains all leaf nodes available for expansion<br>– closed list: a set which remembers every expanded node.</li></ul><p>A Closed list is only needed when redundant paths are unavoidable, e.g. Arad -&gt; Sibiu -&gt; Arad …<br>We need a closed list to avoid exploring redundant paths.<br>The closed list should be implemented with a <strong>hash table</strong> to allow efficient checking for<br>repeated states.</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//------------informal description of the general tree-search---------------</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TREE</span>-<span class="title">SEARCH</span><span class="params">(problem)</span> <span class="title">returns</span> <span class="title">a</span> <span class="title">solution</span>, <span class="title">or</span> <span class="title">failure</span></span></span><br><span class="line">  initialize the frontier using the initial state of problem</span><br><span class="line">  initialize the explored set to be empty</span><br><span class="line">  loop do</span><br><span class="line">    <span class="keyword">if</span> the frontier is empty then <span class="keyword">return</span> failure</span><br><span class="line">    choose a leaf node and remove it from the frontier</span><br><span class="line">    <span class="keyword">if</span> the node contains a goal state then <span class="keyword">return</span> the corresponding solution</span><br><span class="line">    add the node to the explored set</span><br><span class="line">    expand the chosen node, adding the resulting nodes to the frontier </span><br><span class="line">      only <span class="keyword">if</span> not in the frontier or explored set</span><br><span class="line">    </span><br><span class="line">//---------------------- node of the search tree-------------------------</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CHILD</span>-<span class="title">NODE</span><span class="params">(problem, parent, action)</span> <span class="title">returns</span> <span class="title">a</span> <span class="title">node</span></span></span><br><span class="line">  <span class="keyword">return</span> a node with</span><br><span class="line">    STATE = problem.RESULT(parent.STATE, action),</span><br><span class="line">    PARENT = parent, ACTION = action,</span><br><span class="line">    PATH-COST = parent.PATH-COST + problem.STEP-COST(parent.STATE, action)</span><br></pre></td></tr></table></figure><p>The node has PARENT pointer, solution is the sequence of actions obtained by following parent pointers back to the root.</p><p><img src="searchTree.jpg" alt="Partial search trees for finding a route from Arad to Bucharest"></p><h6 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h6><p>Figure above shows the partial search trees for finding a route from Arad to Bucharest</p><ul><li>Component of the search tree<br>– root : Arad<br>– nodes (shaded): nodes that have been expanded;<br>– nodes (outlined in bold): nodes that have been generated but not yet expanded;<br>– nodes (dashed lines): nodes that have not yet been generated;<br>– branches : parent node -&gt; child node;<br>– frontier (open list): nodes outlined in bold;<br>– explored set (closed list): a set which remembers every expanded node.</li></ul><ul><li>Tree-Search<br>initial frontier = { Arad };<br><strong>step1: </strong>remove Arad from frontier;<br><strong>step2: </strong>current city == goal city ? return solution : do step3.;<br><strong>step3: </strong>expand current city to adjacent cities: Sibiu, Timisoara, Zerind. Add them to frontier;<br><strong>step4: </strong>if frontier is not empty, choose a city to expand according to some strategy, and do step234 recurrently;<br><strong>step5: </strong>if frontier is not empty, return false.</li></ul><p>In fact, all search algorithms share this basic tree structure above, they vary primarily according to how they choose which state to expand next �� the so-called <strong>search strategy</strong>.</p><p>We have two different search strategy, <strong>Uninformed Search</strong> and <strong>Informed Search</strong>, which will be covered in next two articles.</p><h4 id="Evaluation-Criteria-for-Algorithms"><a href="#Evaluation-Criteria-for-Algorithms" class="headerlink" title="Evaluation Criteria for Algorithms"></a>Evaluation Criteria for Algorithms</h4><p>Before we get into the design of specific search strategies, we need to consider the criteria that might be used to choose among them. We can evaluate an algorithm’s performance in<br>four ways:</p><ul><li><strong>Completeness:</strong> Is the algorithm guaranteed to find a solution when there is one?</li><li><strong>Optimality:</strong> Does the strategy find the optimal solution?</li><li><strong>Time complexity:</strong> How long does it take to find a solution?</li><li><strong>Space complexity:</strong> How much memory is needed to perform the search?</li></ul><p>In AI, complexity is expressed in terms of three quantities: </p><ul><li><strong>b:</strong> the branching factor or maximum number of successors of any node; </li><li><strong>d:</strong> the depth of the shallowest goal node (i.e., the number of steps along the path from the root);</li><li><strong>m:</strong> the maximum length of any path in the state space. </li></ul><p>Time is often measured in terms of the number of nodes generated during the search.<br>Space in terms of the maximum number of nodes stored in memory.</p><h6 id="Source-of-pictures-for-this-article"><a href="#Source-of-pictures-for-this-article" class="headerlink" title="Source of pictures for this article:"></a>Source of pictures for this article:</h6><p>Russell and Norvig (2010). Artificial Intelligence: A Modern Approach.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;A problem-solving agent is one kind of goal-based agent. We already know that the characteristics of the environment dictate techniq
      
    
    </summary>
    
      <category term="Artificial Intelligence" scheme="https://zequnsong.github.io/categories/Artificial-Intelligence/"/>
    
      <category term="Uninformed &amp; Informed Search" scheme="https://zequnsong.github.io/categories/Artificial-Intelligence/Uninformed-Informed-Search/"/>
    
    
      <category term="AI" scheme="https://zequnsong.github.io/tags/AI/"/>
    
  </entry>
  
</feed>
